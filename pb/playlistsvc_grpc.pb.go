// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: playlistsvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistSvcClient is the client API for PlaylistSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistSvcClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*EmptyParams, error)
	Pause(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
	Next(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
	Prev(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
	AddSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error)
	Delete(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*EmptyParams, error)
	GetPlaylist(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*PlaylistReply, error)
}

type playlistSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistSvcClient(cc grpc.ClientConnInterface) PlaylistSvcClient {
	return &playlistSvcClient{cc}
}

func (c *playlistSvcClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) Pause(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) Next(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) Prev(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) AddSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) Delete(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistSvcClient) GetPlaylist(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*PlaylistReply, error) {
	out := new(PlaylistReply)
	err := c.cc.Invoke(ctx, "/pb.PlaylistSvc/GetPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistSvcServer is the server API for PlaylistSvc service.
// All implementations must embed UnimplementedPlaylistSvcServer
// for forward compatibility
type PlaylistSvcServer interface {
	Play(context.Context, *PlayRequest) (*EmptyParams, error)
	Pause(context.Context, *EmptyParams) (*EmptyParams, error)
	Next(context.Context, *EmptyParams) (*EmptyParams, error)
	Prev(context.Context, *EmptyParams) (*EmptyParams, error)
	AddSong(context.Context, *Song) (*Song, error)
	Delete(context.Context, *PlayRequest) (*EmptyParams, error)
	GetPlaylist(context.Context, *EmptyParams) (*PlaylistReply, error)
	mustEmbedUnimplementedPlaylistSvcServer()
}

// UnimplementedPlaylistSvcServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistSvcServer struct {
}

func (UnimplementedPlaylistSvcServer) Play(context.Context, *PlayRequest) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlaylistSvcServer) Pause(context.Context, *EmptyParams) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlaylistSvcServer) Next(context.Context, *EmptyParams) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPlaylistSvcServer) Prev(context.Context, *EmptyParams) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPlaylistSvcServer) AddSong(context.Context, *Song) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistSvcServer) Delete(context.Context, *PlayRequest) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlaylistSvcServer) GetPlaylist(context.Context, *EmptyParams) (*PlaylistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}
func (UnimplementedPlaylistSvcServer) mustEmbedUnimplementedPlaylistSvcServer() {}

// UnsafePlaylistSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistSvcServer will
// result in compilation errors.
type UnsafePlaylistSvcServer interface {
	mustEmbedUnimplementedPlaylistSvcServer()
}

func RegisterPlaylistSvcServer(s grpc.ServiceRegistrar, srv PlaylistSvcServer) {
	s.RegisterService(&PlaylistSvc_ServiceDesc, srv)
}

func _PlaylistSvc_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).Pause(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).Next(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).Prev(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).AddSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).Delete(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistSvc_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistSvcServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaylistSvc/GetPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistSvcServer).GetPlaylist(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistSvc_ServiceDesc is the grpc.ServiceDesc for PlaylistSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PlaylistSvc",
	HandlerType: (*PlaylistSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _PlaylistSvc_Play_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _PlaylistSvc_Pause_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _PlaylistSvc_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _PlaylistSvc_Prev_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _PlaylistSvc_AddSong_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlaylistSvc_Delete_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _PlaylistSvc_GetPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlistsvc.proto",
}
